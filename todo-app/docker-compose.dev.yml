version: '3.8'
services: 
  nginx:
    image: nginx:1.20.1
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    ports:
      - 8080:80
    container_name: reverse-proxy
  mongo:
    image: mongo
    ports:
      - 3456:27017
    container_name: todo-backend_mongo_1
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: example
      MONGO_INITDB_DATABASE: the_database
    volumes:
      - ./todo-backend/mongo/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js
      - ./todo-backend/mongo_data:/data/db
      # - mongo_data:/data/db

  redis:
    image: redis
    ports:
      - 3457:6379
    container_name: todo-backend_redis_1
    command: ['redis-server', '--appendonly', 'yes'] # Overwrite the CMD
    volumes: # Declare the volume
      - ./todo-backend/redis_data:/data

  server:
    image: todo-app-backend
    ports:
      - 3000:3000
    environment:
      DEBUG: playground:*
      REDIS_URL: //todo-backend_redis_1:6379
      MONGO_URL: mongodb://the_username:the_password@todo-backend_mongo_1:27017/the_database
    build:
      context: ./todo-backend # The context will pick this directory as the "build context"
      dockerfile: ./todo-backend/dev.Dockerfile # This will simply tell which dockerfile to readop
    volumes:
      - ./todo-backend:/usr/src/app # The path can be relative, so ./ is enough to say "the same location as the docker-compose.yml"
  
  frontend:
    image: hello-front-dev
    environment:
      - REACT_APP_BACKEND_URL=http://localhost:3000
    build:
      context: ./todo-frontend
      dockerfile: ./todo-frontend/dev.Dockerfile
    volumes:
      - ./todo-frontend:/usr/src/app # The path can be relative, so ./ is enough to say "the same location as the docker-compose.yml"
    ports:
      - 3001:3000